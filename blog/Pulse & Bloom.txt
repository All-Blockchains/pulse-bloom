<style>
#OB-pulse-bloom ol,
#OB-pulse-bloom ul {
    margin-left: 24px;
}
#OB-pulse-bloom li {
    color: inherit;
    font-size: inherit;
    list-style-position: outside;
}
#OB-pulse-bloom ol li {
    list-style-position: outside;
    list-style-type: decimal;
}
#OB-pulse-bloom img {
    margin: 24px auto;
    border: 1px solid #303030;
    display: block;
}
#OB-pulse-bloom img.small {
    float: left;
    margin-right: 24px;
}
#OB-pulse-bloom img.no-border {
    border: none;
}
#OB-pulse-bloom pre code {
    display: block;
    overflow-y: hidden;
}
</style>

<div id="OB-pulse-bloom">

This was my second year attending Burning Man. Many use Burning Man as a week to detach from their workweek and experience a new life of intense leisure. Not me, I come to Burning Man to build.

Pulse & Bloom is a [2014 honorarium installation](http://www.burningman.com/installations/art_honor.html). The core team of 6 people, including myself, built 20 steel interactive lotus flowers, ranging from 8 to 18 feet tall, which lit up with your pulse. You and another person put your hands on a couple of Hamsa hands at the base of the lotus flower and your heartbeat would light up the flower.

As usual, the [complete source code for Pulse & Bloom is on GitHub](https://github.com/samuelclay/pulse-bloom).

Here's a video of all twenty lotus flowers in full working order.

<video src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom.mp4" autoplay loop muted width="650"></video>

Each lotus flower is blue until a person or two sits down at its base and places their hand on the pulse sensor. You can see the Hamsa hand and its embedded pulse sensor in this shot of my girlfriend Brittany and me working on keeping the electronics going.

<img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20Glue%20Gun.jpg" width="650">

When a pulse is read, the lotus flower shoots their heartbeat up the stem and into the petals, where it blooms in a brilliant display of amber. When two people's hands are being measured, both of their heartbeats are shown as two distinct colors.

## How the electronics are made

There are five stages to making the electronics:

 1. [Making the custom circuit boards](#boards)
 2. [Making the custom pulse sensors](#sensors)
 3. [Driving the high current LEDs](#leds)
 4. [Writing the firmware](#firmware)
 5. [Powering the lotuses](#power)

<a name="boards"></a>

### 1. Making the custom circuit boards

The circuit board for the lotus controls all of the lighting, sensors, timing, and debugging sequences. A reliable circuit board couldn't just be an Arduino and a breadboard. I decided to use [OSH Park](http://www.oshpark.com) and [OSH Stencils](http://www.oshstencils.com) to fabricate inexpensive circuit boards. I ultimately went through seven revisions while we worked out the final design of the lotuses.

This board has support for multiple high current petal LEDs, driving both digital RGB (used for fading colors in and out using PWM), and multiple voltages. The high current petal LEDs used 12V, while came directly off the battery, while the ATmega328p chip and stem LEDs used 5V, while the pulse sensor used 3.3V.

To convert 12V to 5V I use [a switching voltage regulator which cost $3 at Electrodragon](http://www.electrodragon.com/product/better-than-lm2596-dc-dc-step-down-adjustable-power-supply-module/). This requires a +/- connection for both 12V in and 5V out. To convert 5V to 3.3V I used a linear regulator soldered on the board, sinc ethe current requirements of the pulse sensor were around 20mA.

I also added terminal connections for two 5 meter LEDs that wrapped around the tall lotus stem. There were two stem LEDs because when two people put their hands on the two pulse sensors, we need an easy way to show both heartbeats without one winning out over the other. When only one person's hand in being measured, both 5 meter stem lights show the same color, which makes it that much brighter for a single person.

Lastly, the two pulse sensors terminals their I2C wires on the board. I used two separate I2C channels instead of one to cut down on time. I could easily have put both pulse sensors on the same I2C connections, but that would've required both pull-up resistors on the SDA and SCL data lines as well as a rewrite of the timing functions for the sensor.

<img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20board%20schematic.png" width="650" class="no-border">

The board was laid out to be as big as a pack of gum. All of the 12V traces are thickened and isolated on the right side of the board. They are rated for 3 amps although they would end up only driving 1 amp on the playa.

<img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20board%20layout.png" width="650" class="no-border">

These boards are then stenciled with solder paste and populated with their chips and passive components.

<img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20Soldering%20boards.jpg" width="650">

An inexpensive hot plate is used to reflow the solder. The chip is in a TQFP packages, which has a 0.5mm pitch between pins, which is nearly impossible to hand solder. This technique works well and my yield stayed high at around 95%.

<img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20Reflowing%20boards.jpg" width="650">

Finally, the board is ready to be populated with screw terminals.

<img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20Naked%20Board.jpg" width="650">

The final board in a dust-proof enclosure.

<img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20enclosure.jpg" width="650">

<a name="sensors"></a>

### 2. Making the custom pulse sensors

This was both the riskiest piece of the puzzle and also the most fun to build. In order to show your heartbeat on the lotus, I needed to have a clear reading of your pulse. There are a fair number of issues with most heartbeat sensors, including:

 * **Cost**: While a $50 pulse sensor is nice, it's way out of our budget. We spent $6 in components to make each of our pulse sensors for a total of 40 sensors (two per lotus).
 * **Design affordance**: There were a fair number of pulse sensors that required an infrared light on one side of your finger and an infrared detector/receiver on the other. This clamping of your finger wasn't something we could get away with in the desert. We needed a sensor you could just touch and hold.
 * **Reliability**: When a sensor gets covered in dust, will it still work? Infrared light, thankfully, passes through a layer of dust and can read the changes in blood flow in your finger. Some options were entirely visual and they would have performed quite poorly out on the playa.

The first prototype I build suffered from the design affordance and reliability issues, although it worked pretty well in ideal conditions.

<video src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20Sensor%20opamp.mp4" autoplay loop muted width="650"></video>

We ended up finding an IC by Silicon Labs called the Si1143x, which has three LEDs - two infrared and one visible - and a small QFN-10 sized light sensor.

<img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20sensor%20schematic.png" width="650" class="no-border">

I built out a small PCB the size of a fingertip.

<img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20sensor%20layout.png" width="650" class="no-border">

This tiny IC is a bit tricky to solder as it has no leads and the pins are extremely close together. My yield dropped to about 80%, but 4 out of every 5 I built worked perfectly.

<img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20Reflowing%20sensors.jpg" width="650">

Finally the sensor is hooked up and a tiny red light is emitted, letting people know where to put their fingers.

<img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20Sensor.jpg" width="650">

<a name="leds"></a>

### 3. Driving the high current LEDs

What turned these lotuses from flowers into gems are the high current LEDs mounted in the petals at the top. There are 9 LEDs per lotus, split into groups of three, each driven by a constant current driver. 

<img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20Night.jpg" width="650">

Normally a single LED is powered by a single constant current driver. This driver can drive up to 1A of current at 12V. Because we were only using a single channel of color (blue) in the rest state, which is where the lotus spent most of its time, we could triple the number of LEDs driven by a single constant current driver. 

When in use, the petals would glow amber, which uses two channels (100% red, 50% green), but only for a moment at peak current. So while the peak current is above what this constant current driver is rated for, it's only at peak and therefore within our tolerance.

Using a Chinese distributor, we bought these Sparkfun high current LEDs for $0.86 each instead of the full $15. However, we also bought 80 PicoBucks to use as our constant current driver. While we could have built this ourselves to save money, buying 80 of something at $15 each is still only $1.2k, while building them ourselves would only have saved a few hundred dollars.

<a href="https://www.sparkfun.com/products/8718"><img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20LEDs.jpg" width="300" class="small no-border"></a>
<a href="https://www.sparkfun.com/products/11850"><img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20PicoBuck.jpg" width="300"  class="small no-border" style="margin-right: 0;"></a>

We bought 200 high current LEDs, all of which had to have their 6 anode and cathode connections soldered.

<img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20Soldering%20leds.jpg" width="650">

In order to connect 9 high current LEDs to the board, we need to drive them in groups of three. Each group has 6 connections: red, green, blue anodes, and red, green, blue cathodes. The wiring diagram for this setup can get a bit rats nesty, but the end result was fairly easy to work with, as the picobuck groups didn't cross.

<img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20Petal%20LEDs%20wiring.png" width="650" class="no-border">

Finally, a shot of a complete picobuck with the wire connectors in the background.

<img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20wired%20picobuck.jpg" width="650">

<a name="firmware"></a>

### 4. Writing the firmware

The [complete source code for Pulse & Bloom is on GitHub](https://github.com/samuelclay/pulse-bloom). There you can find the firmware used to program the main circuit board's ATmega328p chip, as well as designs for the laser cut cowl that sits over the pulse sensor's Si1143x IC. 

The easiest way to read the firmware is to dive into `src/pulse.cpp`. It has all of the pulse and rest states and handles the high level logic.

The state machine that runs the entire routine is determined by a couple critical measurements. The program takes a measurement of both pulse sensors and determines whether a finger is covered any of them and whether or not that finger has an active pulse going.

    // Modes
    void determinePlayerMode();
    void determineFingerMode(int sensor1On, int sensor2On);
    void resetStem(PulsePlug *pulse);
    uint8_t adjustBpm(PulsePlug *pulse);
    
When there are no fingers on either of the pulse sensors, the program runs the rest state, which is a blue-topped lotus with a small blue snake running up and down the stem. The program is merely waiting for somebody to put their finger on a sensor.

    // State: resting
    void runResting();
    void runRestStem();
    void runRestStem(PulsePlug *pulse, int16_t currentLed);
    void clearStemLeds(PulsePlug *pulse);
    void beginPetalResting();
    bool runPetalResting();

Before a heartbeat is shown an accurate measurement of a heartbeat needs to be read. Before that happens though there are a number of measurements being taken in hopes that the typical heartbeat curve is found. This can take up to two or three seconds, so a bit of animation happens to delay the feeling of waiting.

When a finger is detected, the steam snake lights shoot backwards up and down the lotus in prep for a heartbeat. This looks seamless as it clears the stem. This way a heartbeat doesn't interrupt the rest state.

    // State: end resting
    void beginSplittingStem();
    void runSplittingStem();
    void runSplittingStem(PulsePlug *pulse, int16_t currentLed);

When a heartbeat is detected, it is first shot up the stem. The color is determined by how many pulse sensors are being used.

    // State: stem rising
    bool runStemRising(PulsePlug *pulse, PulsePlug *shadowPulse);

Once the heartbeat reaches the top of the stem, the petals then fill with light.

    // State: petal rising
    void beginPetalRising();
    bool runPetalRising();

After a set delay, the petal slowly lose light while waiting for the next heartbeat.

    // State: petal falling
    void beginPetalFalling();
    bool runPetalFalling();

Lots of debugging messages have been left in the code and are accessible using the Serial pin on the board. Just turn on `USE_SERIAL`, which is commented out at top. Note that this increased code size by about 2.5K. I wrote a lot of logging.

    // Debugging
    void printHeader();
    void blink(int loops, int loopTime, bool half);
    int freeRam ();

<a name="power"></a>

### 5. Powering the lotuses

While much of what I built above came out of knowledge I already had, learning how to power this large of an installation off just a battery was all new to me. I'm used to microelectronics that run off a coin cell or AA batteries.

First, in order to figure out how big of a battery we needed, we had to measure how much power we were taking. I hooked up an ammeter in series with a single lotus to measure the current draw. In rest state, a single lotus drew 0.75A at 12V. In the active pulsing heartbeat state, a single lotus drew 1.5A at 12V. Since a lotus spends 95% of its time at rest, we rounded the average current consumption to 1.0A.

Twenty lotuses at 1A at 12V meant we needed 240Ah to sustain a 12 hour night. A car battery was recommended, but car batteries can only discharge down to 80% without irreparable harm. However, a marine deep-cycle battery can go down to 20% without harm. 

<a href="http://www.lifelinebatteries.com/marineflyer.php?id=6"><img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20battery.jpg" width="300" class="no-border"></a>

This battery has enough capacity, although we ended up adding a couple 6V batteries in series (to boost them to 12V) and then running them in parallel to offset some of the load.

A big issue we ran into was the voltage drop across the power lines. We placed the batteries on the edge of the installation, which meant some of the lotuses had 20 meters of wire between them and the battery. The voltage drop per 10 meter section is nearly 2V, which means that the voltage reaching the further lotuses was down to 7.5V. 

The high current LEDs were not able to be smoothly driven at this low of a voltage, causing them to flicker. We determined that a voltage drop was responsible as the flickering got worse the further from the batteries the lotus was. But the wires had already been trenched 6 inches beneath the playa. We sucked it up and ripped out all of the ground wiring to accommodate the battery which had to be moved into the center of the installation.

At the end of each night we had to bike out with a trike and bike all 300 lbs. of battery back to camp, where they were hooked up to a 1 kW solar array, where we charged them at 48A over 6 hours.

## Prototyping the lotuses
<img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20Raw%20Stems.jpg" width="650">
<img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20First%20prototype.jpg" width="650">


## A dusty scene
<img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20Van.jpg" width="650">
<img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20Bracelet.jpg" width="650">
<img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20Dusty%20Board.jpg" width="650">
<img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20Dust.jpg" width="650">
<img src="http://static.newsblur.com.s3.amazonaws.com/ofbrooklyn/Pulse%20%26%20Bloom%20-%20Day.jpg" width="650">


</div>